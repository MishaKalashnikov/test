import openai
import sqlite3
import asyncio
from bot import send_message  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

# üî• API-–∫–ª—é—á OpenAI
OPENAI_API_KEY = "your-api-key"
openai.api_key = OPENAI_API_KEY

# üìÇ –ü–æ–¥–∫–ª—é—á–∞–µ–º –ë–î
DB_PATH = "streamer_voice_log.db"

# üéôÔ∏è –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
message_queue = asyncio.Queue()

# üî• –•—Ä–∞–Ω–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –¥–∏–∞–ª–æ–≥–æ–≤ (—á—Ç–æ–±—ã –±–æ—Ç "–ø–æ–º–Ω–∏–ª" –æ —á—ë–º –≥–æ–≤–æ—Ä–∏—Ç)
chat_contexts = {}

async def get_latest_voice_logs():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("""
        SELECT streamer, keyword, full_text FROM voice_logs 
        WHERE timestamp >= datetime('now', '-1 minute')
        ORDER BY timestamp DESC
    """)
    logs = cursor.fetchall()
    conn.close()

    for log in logs:
        await message_queue.put(log)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å

async def generate_response(streamer, keyword, context):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç ChatGPT —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥—ã"""
    if streamer not in chat_contexts:
        chat_contexts[streamer] = [
            {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –±–æ—Ç, –æ–±—â–∞—é—â–∏–π—Å—è —Å —Å—Ç—Ä–∏–º–µ—Ä–∞–º–∏ –Ω–∞ Twitch."}
        ]

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–µ—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    chat_contexts[streamer].append({"role": "user", "content": f"{streamer} —Å–∫–∞–∑–∞–ª: {context}"})

    response = await asyncio.to_thread(openai.ChatCompletion.create,
                                       model="gpt-4",
                                       messages=chat_contexts[streamer],
                                       max_tokens=50
                                       )

    reply = response["choices"][0]["message"]["content"]

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ (—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –±–µ—Å–µ–¥—É)
    chat_contexts[streamer].append({"role": "assistant", "content": reply})

    print(f"üí¨ [ChatGPT] –û—Ç–≤–µ—Ç –¥–ª—è {streamer}: {reply}")
    return reply

async def process_messages(sock):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã"""
    while True:
        streamer, keyword, context = await message_queue.get()  # –ë–µ—Ä—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        reply = await generate_response(streamer, keyword, context)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        await send_message(sock, streamer, reply)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
        await asyncio.sleep(2)  # –ß—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Å–ø–∞–º–∏–ª —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
