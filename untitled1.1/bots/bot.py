import socket
import random
import asyncio
import logging
from database import get_channels_by_type  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º —á–∞—Ç–æ–º

# üî• –î–ê–ù–ù–´–ï –ë–û–¢–ê
BOT_NICK = "YourBotUsername"  # –ò–º—è –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—ë)
BOT_TOKEN = "oauth:xxxxxxxxxxxxxxxxxxxxxx"  # –¢–≤–æ–π OAuth-—Ç–æ–∫–µ–Ω
SERVER = "irc.chat.twitch.tv"
PORT = 6667

# üî• –ë–ï–†–Å–ú –°–ü–ò–°–û–ö –°–¢–†–ï–ú–ò–†–û–í –° –û–¢–ö–†–´–¢–´–ú –ß–ê–¢–û–ú
BOT_CHANNELS = [channel[1] for channel in get_channels_by_type("open")]

# üî• –°–ü–ò–°–û–ö –°–û–û–ë–©–ï–ù–ò–ô (–±–æ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö)
MESSAGES = [
    "–ü—Ä–∏–≤–µ—Ç! üòä –ö–∞–∫ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
    "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —á–∞—Ç—É –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–µ–µ!",
    "–ö—Ä—É—Ç–æ–π —Å—Ç—Ä–∏–º! üöÄ",
    "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!",
    "–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç?",
    "–Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –Ω–æ –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à —á–∞—Ç! üòé"
]

# üõ†Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

async def connect_to_twitch():
    """üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Twitch IRC (—Å –∞–≤—Ç–æ-–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º)"""
    while True:
        try:
            sock = socket.socket()
            sock.connect((SERVER, PORT))
            sock.send(f"PASS {BOT_TOKEN}\n".encode("utf-8"))
            sock.send(f"NICK {BOT_NICK}\n".encode("utf-8"))

            for channel in BOT_CHANNELS:
                sock.send(f"JOIN #{channel}\n".encode("utf-8"))
                logging.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ #{channel}")

            print("‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Twitch!")
            return sock
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(10)  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –∂–¥—ë–º 10 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞

async def send_message(sock, channel, message):
    """üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç Twitch"""
    try:
        sock.send(f"PRIVMSG #{channel} :{message}\n".encode("utf-8"))
        print(f"üí¨ [–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ #{channel}]: {message}")
        logging.info(f"üí¨ [#{channel}] {message}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {channel}: {e}")

async def send_chatgpt_reply(sock, streamer, reply):
    """ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç ChatGPT –≤ —á–∞—Ç"""
    await send_message(sock, streamer, reply)

async def keep_alive(sock):
    """üõ†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PONG-—Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã Twitch –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª –±–æ—Ç–∞"""
    while True:
        try:
            sock.send("PONG :tmi.twitch.tv\n".encode("utf-8"))
            await asyncio.sleep(300)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PONG: {e}")

async def listen_to_chat(sock):
    """üéôÔ∏è –°–ª—É—à–∞–µ—Ç —á–∞—Ç –∏ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    while True:
        try:
            response = sock.recv(2048).decode("utf-8")

            if "PING" in response:
                sock.send("PONG :tmi.twitch.tv\n".encode("utf-8"))  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ PING –æ—Ç Twitch

            for channel in BOT_CHANNELS:
                if f"@{BOT_NICK}" in response:
                    await send_message(sock, channel, "–í—ã –ø–æ–∑–≤–∞–ª–∏ –º–µ–Ω—è? üòä")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —á–∞—Ç–∞: {e}")

async def bot_loop():
    """‚ôªÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
    sock = await connect_to_twitch()

    # –°–æ–∑–¥–∞—ë–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(keep_alive(sock))
    asyncio.create_task(listen_to_chat(sock))

    while True:
        for channel in BOT_CHANNELS:
            message = random.choice(MESSAGES)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await send_message(sock, channel, message)
            await asyncio.sleep(random.randint(30, 90))  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

if __name__ == "__main__":
    asyncio.run(bot_loop())
