import sounddevice as sd
import speech_recognition as sr
import sqlite3
import queue
import time
import threading
from database import get_channels_by_type  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤

# üîπ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º
KEYWORDS = {"discord", "faceit", "link", "steam"}

# üé§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ OBS, —É–∫–∞–∂–∏ 'CABLE Output')
SAMPLERATE = 44100
DEVICE = None  # –ï—Å–ª–∏ OBS ‚Üí 'CABLE Output (VB-Audio Virtual Cable)'

# üìÇ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º)
conn = sqlite3.connect("streamer_voice_log.db", check_same_thread=False)
cursor = conn.cursor()
db_lock = threading.Lock()  # üõ†Ô∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î

cursor.execute("""
    CREATE TABLE IF NOT EXISTS voice_logs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        streamer TEXT,
        keyword TEXT,
        full_text TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
""")
conn.commit()

# üéôÔ∏è –û—á–µ—Ä–µ–¥—å –¥–ª—è –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
recognizer = sr.Recognizer()

def get_open_chat_streamers():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–∫—Ä—ã—Ç —á–∞—Ç"""
    return [channel[1] for channel in get_channels_by_type("open")]

def listen_to_streamer(streamer):
    """–°–æ–∑–¥–∞—ë—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞"""
    print(f"üéôÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ {streamer}...")

    q = queue.Queue()

    def callback(indata, frames, time, status):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –≤ –æ—á–µ—Ä–µ–¥—å"""
        q.put(indata.copy())

    with sd.InputStream(samplerate=SAMPLERATE, device=DEVICE, channels=1, callback=callback):
        while True:
            try:
                data = q.get()
                audio = sr.AudioData(data.tobytes(), SAMPLERATE, 2)
                text = recognizer.recognize_google(audio, language="en-US").lower()
                print(f"üó£Ô∏è [{streamer}] –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: {text}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                words = set(text.split())
                found_words = words.intersection(KEYWORDS)

                if found_words:
                    keyword = ", ".join(found_words)
                    print(f"‚úÖ [{streamer}] –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ: {keyword}")
                    threading.Thread(target=capture_speech, args=(streamer, keyword)).start()  # üõ†Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ—á–∏
            except sr.UnknownValueError:
                pass  # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å
            except Exception as e:
                print(f"‚ùå [{streamer}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏: {e}")

def capture_speech(streamer, keyword):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç 10 —Å–µ–∫—É–Ω–¥ —Ä–µ—á–∏ –ø–æ—Å–ª–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    print(f"‚è≥ [{streamer}] –ó–∞–ø–∏—Å—å —Ä–µ—á–∏ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ '{keyword}'...")

    start_time = time.time()
    full_text = ""
    q = queue.Queue()

    while time.time() - start_time < 10:
        try:
            data = q.get()
            audio = sr.AudioData(data.tobytes(), SAMPLERATE, 2)
            text = recognizer.recognize_google(audio, language="en-US").lower()
            full_text += text + " "
        except sr.UnknownValueError:
            pass  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å
        except Exception as e:
            print(f"‚ùå [{streamer}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ—á–∏: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_to_db(streamer, keyword, full_text.strip())

def save_to_db(streamer, keyword, full_text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)"""
    with db_lock:  # üõ†Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        cursor.execute("INSERT INTO voice_logs (streamer, keyword, full_text) VALUES (?, ?, ?)",
                       (streamer, keyword, full_text))
        conn.commit()
    print(f"üíæ [{streamer}] –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: {keyword} - {full_text}")

def start_listening():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤"""
    streamers = get_open_chat_streamers()

    if not streamers:
        print("‚ö†Ô∏è –ù–µ—Ç —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º —á–∞—Ç–æ–º!")
        return

    print(f"üéôÔ∏è –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤: {', '.join(streamers)}")

    threads = []
    for streamer in streamers:
        thread = threading.Thread(target=listen_to_streamer, args=(streamer,))
        thread.daemon = True  # üõ†Ô∏è –î–∞–µ–º –ø–æ—Ç–æ–∫–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        thread.start()
        threads.append(thread)

    for thread in threads:
        thread.join()  # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤

# üî• –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
if __name__ == "__main__":
    start_listening()
