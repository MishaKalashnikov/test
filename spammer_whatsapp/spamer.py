import pyautogui
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import sqlite3
import time
import logging
import random
import os
from datetime import datetime

# ========================== 1. –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==========================
logging.basicConfig(filename="spammer.log", level=logging.INFO,
                    format="%(asctime)s - %(levelname)s - %(message)s")

# ========================== 2. –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• ==========================
def init_db():
    """–°–æ–∑–¥–∞—ë—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    conn = sqlite3.connect("spammer.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        phone_number TEXT NOT NULL,
        message TEXT NOT NULL
    )
    """)
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü–∞ 'messages' —Å–æ–∑–¥–∞–Ω—ã!")

# ========================== 3. –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ==========================
def add_message(phone_number, message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect("spammer.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO messages (phone_number, message) VALUES (?, ?)", (phone_number, message))
    conn.commit()
    conn.close()
    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {phone_number} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")

def get_messages():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect("spammer.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, phone_number, message FROM messages")
    messages = cursor.fetchall()
    conn.close()
    return messages

def view_database():
    """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    messages = get_messages()
    if not messages:
        print("üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞!")
    else:
        print("\nüìã –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ:")
        for row in messages:
            print(f"ID: {row[0]}, –ù–æ–º–µ—Ä: {row[1]}, –°–æ–æ–±—â–µ–Ω–∏–µ: {row[2]}")

def clear_database():
    """–û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    conn = sqlite3.connect("spammer.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM messages")
    cursor.execute("DELETE FROM sqlite_sequence WHERE name='messages'")
    conn.commit()
    conn.close()
    print("üóë –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!")

# ========================== 4. –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ==========================
def send_via_whatsapp_web(driver, phone_number, message, min_delay=10, max_delay=13):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WhatsApp Web"""
    try:
        if driver.session_id is None:
            print("‚ùå Chrome –∑–∞–∫—Ä—ã—Ç. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä –∏ —Å–∫—Ä–∏–ø—Ç.")
            return

        print(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ {phone_number}...")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
        url = f"https://web.whatsapp.com/send?phone={phone_number}&text={message}"
        driver.get(url)

        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∂–¥–µ–º...")
        time.sleep(random.uniform(min_delay, max_delay))

        # ‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥, –∑–∞—Ç–µ–º –Ω–∞–∂–∏–º–∞–µ–º ENTER
        print("üîπ –ù–∞–∂–∏–º–∞–µ–º ENTER...")
        pyautogui.press("enter")
        pyautogui.press("enter")

        send_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        logging.info(f"{send_time} | –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {phone_number}: {message}")
        print(f"‚úÖ {send_time} | –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ {phone_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ {phone_number}: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ {phone_number}: {str(e)}")

# ========================== 5. –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==========================
def main():
    init_db()
    print("\n===== WhatsApp Spammer (–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è) =====")

    options = Options()
    options.debugger_address = "127.0.0.1:9222"

    try:
        driver = webdriver.Chrome(options=options)
        print("\nüöÄ Chrome –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –ø–æ—Ä—Ç—É 9222.")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Chrome!")
        print(str(e))
        return

    while True:
        print("\n[1] –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î")
        print("[2] –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print("[3] –ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("[4] –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print("[0] –í—ã—Ö–æ–¥")

        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä: ")

        if choice == "1":
            phone_number = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ")
            message = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ")
            add_message(phone_number, message)
        elif choice == "2":
            view_database()
        elif choice == "3":
            messages = get_messages()
            if not messages:
                print("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                continue
            for msg_id, phone, text in messages:
                send_via_whatsapp_web(driver, phone, text)
        elif choice == "4":
            clear_database()
        elif choice == "0":
            print("üëã –í—ã—Ö–æ–¥.")
            driver.quit()
            break
        else:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# ========================== 6. –ó–ê–ü–£–°–ö –ü–†–û–ì–†–ê–ú–ú–´ ==========================
if __name__ == "__main__":
    main()