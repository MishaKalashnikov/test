import asyncio
import logging
import requests
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from utils.database import get_all_channels, get_channels_by_type, insert_or_update_channel, delete_channel, clear_channels
from bots.bot import bot_loop, connect_to_twitch
from services.voice_scanner import start_voice_scanner
from bots.chatGPT import process_messages

# üî• –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# üî• –ü–æ—Ä—Ç—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤
PORTS = [9222, 9223]

# üî• User-Agent
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36"

# üî• –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
def is_port_available(port):
    try:
        response = requests.get(f"http://127.0.0.1:{port}/json", timeout=5)
        return response.status_code == 200
    except requests.exceptions.RequestException:
        return False

# üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium (–¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ –ø–æ—Ä—Ç–∞–º)
def setup_driver(port):
    options = webdriver.ChromeOptions()
    options.add_argument("--start-maximized")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument(f"user-agent={USER_AGENT}")
    options.debugger_address = f"127.0.0.1:{port}"

    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--disable-software-rasterizer")

    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
    wait = WebDriverWait(driver, 30)
    return driver, wait

# üî• –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞, –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ ChatGPT —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä—ã
async def start_services():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ë–î"""

    # ‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    clear_db = input("\nüìå –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º? (yes/no): ").strip().lower()
    if clear_db == "yes":
        clear_channels()  # –û—á–∏—â–∞–µ–º –ë–î
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!")

    for port in PORTS:
        print(f"üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")

        if is_port_available(port):
            print(f"üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—Ä–∞—É–∑–µ—Ä—É –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            logging.info(f"üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—Ä–∞—É–∑–µ—Ä—É –Ω–∞ –ø–æ—Ä—Ç—É {port}")

            driver, wait = setup_driver(port)
            print(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {port} –ø–æ–¥–∫–ª—é—á–µ–Ω.")

            # üî• –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Twitch
            sock = await connect_to_twitch()

            # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∫–∞–∫ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            asyncio.create_task(bot_loop())  # –ë–æ—Ç
            asyncio.create_task(start_voice_scanner())  # –ì–æ–ª–æ—Å–æ–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            asyncio.create_task(process_messages(sock))  # ChatGPT –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —á–∞—Ç

            # üõë –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            while True:
                await asyncio.sleep(1)

            driver.quit()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        else:
            print(f"‚ö†Ô∏è –ü–æ—Ä—Ç {port} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            logging.warning(f"‚ö†Ô∏è –ü–æ—Ä—Ç {port} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

# üî• –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def manage_database():
    print("\nüìå –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ –ë–î...")
    channels = get_all_channels()

    if channels:
        for channel in channels:
            print(channel)
    else:
        print("‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.")

    insert_or_update_channel("example_channel", "followers")
    print("\n‚úÖ –ö–∞–Ω–∞–ª 'example_channel' –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –ë–î!")

    channel_name = input("\n–í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ")
    if channel_name:
        delete_channel(channel_name)

    print("\nüìå –í—Å–µ –∫–∞–Ω–∞–ª—ã (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ç–∏–ø—É):")
    channels = get_all_channels()
    if channels:
        for row in channels:
            print(row)
    else:
        print("‚ö†Ô∏è –í –±–∞–∑–µ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è.")

    print("\nüìå –ö–∞–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –¥–ª—è 'followers':")
    followers = get_channels_by_type("followers")
    print(followers if followers else "‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.")

    print("\nüìå –û—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞–Ω–∞–ª—ã ('open'):")
    open_channels = get_channels_by_type("open")
    print(open_channels if open_channels else "‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.")

    print("\nüìå –ö–∞–Ω–∞–ª—ã —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π ('verified'):")
    verified = get_channels_by_type("verified")
    print(verified if verified else "‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤.")

    print("\n‚úÖ –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    print("üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1Ô∏è‚É£ - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ ChatGPT —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä—ã")
    print("2Ô∏è‚É£ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")

    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

    if choice == "1":
        asyncio.run(start_services())  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç—ã
    elif choice == "2":
        manage_database()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–Ω–æ–≤–∞.")
