import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import threading
import time
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from utils.database import insert_or_update_channel, clear_channels  # –ó–∞–ø–∏—Å—å –≤ –ë–î

# üî• –¢–µ–ø–µ—Ä—å `utils.database` –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!


# üî• –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    filename="parser.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
LANGUAGES = {
    "1": "en", "2": "ru", "3": "es", "4": "de", "5": "fr",
    "6": "pt", "7": "pl", "8": "it", "9": "tr", "10": "ja"
}

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Selenium
def create_driver():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±—Ä–∞—É–∑–µ—Ä–∞"""
    chrome_options = Options()
    chrome_options.headless = True  # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ —Å–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-popup-blocking")
    chrome_options.add_argument("--disable-notifications")

    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)

    # ‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç WebDriver
    driver.set_page_load_timeout(60)
    driver.set_script_timeout(60)

    return driver

def select_languages():
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —è–∑—ã–∫–æ–≤"""
    print("\nüîπ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    for key, lang in LANGUAGES.items():
        print(f"{key}. {lang}")

    while True:
        choices = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —è–∑—ã–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,2,5 –¥–ª—è English, Russian, French): ").strip()
        selected_languages = {LANGUAGES[num] for num in choices.split(",") if num in LANGUAGES}

        if selected_languages:
            return list(selected_languages)
        else:
            print("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —è–∑—ã–∫–æ–≤.")

def get_stream_links(language, results):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Twitch –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∏–º—ã"""
    driver = create_driver()
    url = f"https://www.twitch.tv/directory/category/counter-strike?sort=VIEWER_COUNT_ASC&lang={language}"

    try:
        driver.get(url)
        time.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç—É

        # üîπ –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∏–º–æ–≤
        for _ in range(5):
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(3)

        # üîπ –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∏–º—ã
        streams = driver.find_elements(By.TAG_NAME, "a")
        raw_links = [stream.get_attribute("href") for stream in streams if stream.get_attribute("href")]

        # üîπ –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∏–º—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤
        filtered_names = list(set(
            link.replace("https://www.twitch.tv/", "").strip() for link in raw_links
            if link.startswith("https://www.twitch.tv/") and
            not any(x in link for x in ["/directory", "/videos", "/clips"])
        ))

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã {len(filtered_names)} —Å—Ç—Ä–∏–º–æ–≤ –¥–ª—è —è–∑—ã–∫–∞: {language}")
        results.extend(filtered_names)
        logging.info(f"{language}: {len(filtered_names)} –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —è–∑—ã–∫–∞ {language}: {e}")
        logging.error(f"{language}: –û—à–∏–±–∫–∞ - {e}")

    driver.quit()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º"""
    results = []

    # ‚úÖ –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –ë–î –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
    choice = input("\nüìå –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º? (yes/no): ").strip().lower()
    if choice == "yes":
        clear_channels()  # –û—á–∏—â–∞–µ–º –ë–î
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º!")

    selected_languages = select_languages()
    print(f"\nüîπ –í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫–∏: {', '.join(selected_languages).upper()}")

    threads = []
    for language in selected_languages:
        thread = threading.Thread(target=get_stream_links, args=(language, results))
        thread.start()
        threads.append(thread)

    # ‚úÖ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for thread in threads:
        thread.join()

    # ‚úÖ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    for channel in results:
        insert_or_update_channel(channel, "open")

    print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏!")
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏.")

if __name__ == "__main__":
    main()
